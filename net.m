function [Y,Xf,Af] = net(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 24-Nov-2015 16:25:48.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;0;0;0;0;0;0;0];
x1_step1_gain = [27.5758229649754;26.9126597754225;17.1394529179744;15.3269442659583;27.5758229649754;26.9126597754225;17.1394529179744;15.3269442659583];
x1_step1_ymin = -1;

% Layer 1
b1 = [-1.6322463154593072066;1.4498829083404500828;1.0405558349914556526;-0.62605320290347732382;-0.18637766257255028446;0.74610550627484761854;0.85950756165674935261;-0.98704510681596302479;1.4477761293749487059;1.8410886347307748867];
IW1_1 = [0.65726155378130801665 0.088682941121091762859 0.38318863898798483092 0.15992509006599167631 -1.123889175865940393 0.40427374897604040349 -0.16512874267727017941 -1.2008625497323650588;-0.90680906372950764727 -0.93092732482617546186 -0.96776051627099590746 -0.45273150431477954259 0.12276555093457412748 0.45625206891563335754 0.11683066468737975108 -0.64251307258104695119;-0.50080607309131586202 -0.58260764243348017732 0.29867854601826626659 -0.67656450015979063828 -0.85014308527345705535 -0.9385885779916368632 -0.86654548520591523353 -0.10087770759330087766;0.37703343628350388661 -0.5704705650912162973 0.36798420296560141463 1.1106495177048867351 0.75862924809047327379 -0.866617322433722026 0.063608254446564677087 -0.36642505681778059223;0.78325676660690024544 0.82067044787983112197 -0.87436902100417490669 0.82922068526832271029 0.78300660425657220287 -0.21762166443176167441 0.29870415708920228237 0.046716062971624422451;0.10715119068394032831 -0.62018035805575144614 -0.75110081867657074728 0.68146969977825988529 -0.36233149333412084658 1.0076433561276467721 -0.5583841957080241114 1.2582736527871749566;-0.33606615612442591878 0.2964414776216429126 0.86951610881172802792 1.1079394529032553507 0.15302564067514184964 -0.66994153828376601378 -0.79354855090291431807 1.0095902447405782354;-0.5866216231774261658 0.90073729357821064045 0.84082262403311225363 0.044287356638544217446 -0.20151797943507057664 -1.0693201340165845448 0.29241289098841222183 0.54905811343918531353;0.90666730715432575227 0.82151485902239274051 -0.270468271931942561 0.95956408593871800328 0.68247036985870601633 -0.59804095100962106901 -0.42899903235058567397 0.57216420526928957191;0.8367812861635659516 -0.084955829873714250322 -0.3012613094173333117 -1.0462787532069941498 -0.25994358919270915687 0.57692825649975931768 0.5853027456194234146 0.81745773891113826526];

% Layer 2
b2 = [0.52321877474936639985;-0.34293768467812513201];
LW2_1 = [0.75675815091862408401 0.63016529767811135798 -0.70604149820751838096 0.4105757400997112061 -0.85209732829574924562 -0.89935978064575028412 0.95987554810006892048 -0.5660532403615833319 -0.0057427648399461378448 -0.74233449126153583375;-0.70654532814640647054 0.14562766708386903902 -0.10506332186685338193 -0.56384717299859632433 0.212590290042848018 -0.11410340710056339486 -0.76150440647059602917 0.21657448399727274868 0.51965955679411746093 -0.30297504685641524214];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.00423414634146341;0.00367292225201072];
y1_step1_xoffset = [18.1451612903226;-56.5693430656935];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
