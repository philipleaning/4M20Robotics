function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Nov-2015 21:07:29.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;0;0;0];
x1_step1_gain = [5.9894418189416;6.5436220609089;2.7649602417546;5.25258171141077];
x1_step1_ymin = -1;

% Layer 1
b1 = [-6.3719232902643475;-0.68761469639539619;-8.7063681146264269;1.7268478630240804;3.1777529174810297;-5.8876669899998832;13.22247754964001;1.4095635256533603;-9.9700710529276986;9.9254047714271181];
IW1_1 = [-0.20328923261719473 -2.2428797046667173 -4.8970641237793275 -0.83718219925148762;2.0399884160805097 0.88835999679629629 -5.9116671386346891 1.7149608845420112;-1.8747125582760551 -0.16134723014871191 -1.0186462890075361 -4.3553792095730737;2.8877940269753006 0.88307646043405663 1.0958614086655587 1.3200904470068888;0.41794641098386992 4.4372128406493614 -1.0124766607110061 -0.73360931512992789;-4.2512076298163874 0.13519582696069221 -0.23263508363679794 -0.068392787777992917;-3.7264841246558471 1.3334930444892814 14.564619486083682 -1.0711309457412814;0.34553828022973265 -0.92245451293069114 -2.6424954243663787 -2.8429010699601696;-1.3516971682427739 -1.3023667625431867 -5.9063478885162031 -5.0624137311925903;0.41044639548166079 -0.29662115694846575 7.9489162627744321 0.81364775561429059];

% Layer 2
b2 = [0.052378212011327085;-1.6837600751200663];
LW2_1 = [-0.075999732242851531 0.079119304711180061 -0.26227023230024726 0.092255362112560815 -0.25538204128956549 2.6491530519989688 0.06199824621052074 1.1120966889584072 0.086537494090822661 1.3042430811285366;-0.074769360950229374 0.031116376315130048 1.1258839498378064 -0.030714953617616864 -0.013067777079249668 -1.2315954137287701 -0.03321053072900991 0.38258448044959714 0.055608622455249508 0.50800691303747603];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0131515151515151;0.00382705718270572];
y1_step1_xoffset = [-78.3410138248848;-61.2244897959184];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
