function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Nov-2015 17:23:55.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;0;0;0];
x1_step1_gain = [9.91207533613702;6.01179600722988;15.8113965100983;9.12097744101372];
x1_step1_ymin = -1;

% Layer 1
b1 = [-2.1964654663675018;2.1660770481806737;-2.8195850459170413;-1.2982032461043949;1.1373556781525589;0.26003420950590378;1.3616504424835802;-1.5236425482278115;1.4419115013630281;-3.5116662486073058];
IW1_1 = [1.3158191962257939 -2.7130728068869234 -0.11115690140344399 -0.095106764994022736;-1.6960973998990956 0.045137692409300982 -1.6620832679459365 0.62773998331998027;-0.86424402771801279 -2.1878585976085261 -3.2389400641775374 3.1304775558288602;0.055515155774063775 0.15305481553037226 -0.4345727191002175 -0.19817148000451881;-1.3805647779969061 -0.24421117849536292 3.5636829223542379 -1.5477152199713131;1.3686806800196285 1.4000493833426884 1.2947268739156061 0.79589002065754721;0.36835460658313446 -0.81226477942600617 0.5906349005784155 2.1854218874194902;-0.18972531762814521 -1.5811966202489331 0.27901335447284914 -0.2273049107229288;-0.022563872859481894 -0.10723820258504528 0.43922603472882732 1.5737687532426428;0.34429913499681392 -1.7196628312580919 -1.710194063646445 -0.12247910795413941];

% Layer 2
b2 = [-0.10157355659813606;-0.65907242155604839];
LW2_1 = [0.01600002411061131 -0.94129474297184546 0.24135815599474059 -0.26620696207821432 -0.42481330258284439 -0.036803090236573112 -0.15069972151668221 0.35037015500790936 -0.41860226722662708 -0.84400626858357364;0.35805503022820234 -0.38186804332705504 0.29055089675218765 -0.7884994155275874 0.08438470587787239 0.41932239593751752 0.59260095965815995 -0.17845413922411538 -0.96657669536279078 -0.71180111621416209];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0105853658536585;0.00218819776714514];
y1_step1_xoffset = [-55.2995391705069;-84.5481049562682];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
