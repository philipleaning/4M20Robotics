function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Nov-2015 13:21:56.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_remove = [3 4];
x1_step1_keep = [1 2];
x1_step2_xoffset = [-1105.70978654472;-1216.15536836322];
x1_step2_gain = [0.000988357807547049;0.000900823360494621];
x1_step2_ymin = -1;

% Layer 1
b1 = [4.7199095664824915;-0.3646751750972379;-6.7414798049779741;2.1248792181809377;-0.48620147058313662;0.49081120059347855;0.68329915233303873;-3.4622869344812464;0.51870403580486768;0.7330722798975956];
IW1_1 = [-5.283599849831722 -0.93624369362839588;-2.0305704737941483 -0.14902118889122912;7.5280917730904937 7.9821091786148264;-1.1332718816135117 -0.8563182866605864;-1.9531319599686663 2.1434103141777849;0.084106348315574425 4.3559541709597562;1.983822684312005 -1.7518451806341953;-1.8229532398021056 -7.8643287718025849;0.62754758664264798 2.5430782943576258;2.0333838473511827 -0.38408363733069772];

% Layer 2
b2 = [0.26796972506737909;-0.36801116582989946];
LW2_1 = [-0.58825836683515298 0.89299947966859261 -0.026153281340782576 0.39307789160492818 -0.12903258137567072 0.58104876315855569 -0.66315683282853111 -0.29425361768634212 -1.0186181089158328 1.4418133577120755;0.00049073489631581827 0.14067059505548579 -0.051164664846917896 -0.58682725582757511 -0.31092029752968825 0.10269541954121406 -0.41678052462635429 -0.10668254458044168 -0.24446409050794349 0.29777459218217062];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0069718875502008;0.00150191570881226];
y1_step1_xoffset = [-190.092165898617;-104.956268221574];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
if isempty(settings_remove)
    y = x;
else
    y = x(settings_keep,:);
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
