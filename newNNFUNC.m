function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Nov-2015 20:49:05.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;0;0;0];
x1_step1_gain = [9.46385840306163;17.3151225928519;9.52657129148583;12.5830053280642];
x1_step1_ymin = -1;

% Layer 1
b1 = [-2.5021228563753932;-2.0476347900889578;-1.0286962213587709;-0.52805874284641252;0.43830185596156374;1.2658208222506411;-0.8656625086854085;-0.98257960950737044;-1.3624918967145694;-2.1821209186632475];
IW1_1 = [1.6437662472005421 -0.52735942173771799 1.7511953404048355 0.92210356319892406;-1.0828683862972741 -1.8639531075229272 -0.052788431975146245 2.998905005136101;-2.9214311269778723 0.84044074572095995 1.2381879701892433 -1.026870168906965;-0.08158767921117964 2.7817281497502981 -2.4986287477703533 2.1875699394583012;-0.97267194620841324 -1.1112326976695983 -1.6217184878900264 -0.3368283756559628;-0.1315860848050025 3.1347831991020825 -0.67347697577204779 2.4586620480651846;0.2656205254512507 1.2073229664515714 -0.13793516608369313 2.2944142454406657;-2.3829802390146302 0.43743137028212054 -0.9480745508666879 1.6670667986803294;-1.9511838033540825 0.24207166052742035 0.27222078883518752 0.68942532168347148;-1.4213796633744467 -3.8679050651289186 2.5479441328315886 0.63132475044805381];

% Layer 2
b2 = [1.2470882850859986;-0.93525046878779594];
LW2_1 = [-0.46718681074507318 0.45189752147363926 0.2855764238400661 -0.26052626391859901 -1.285159266678418 0.25656037144355126 0.28457192000910536 -0.2028647822425228 -0.42956557673522011 -0.28952539151414447;-0.71388959530737939 -0.008062845237664866 -0.010546384397674956 -0.16141325438261608 -0.54556538119809317 0.11013092564034496 -0.11293916110389104 0.076985624393244245 0.20066565201148109 -0.093749702086024067];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0153628318584071;0.00595227765726681];
y1_step1_xoffset = [-72.5806451612903;-52.4781341107872];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
