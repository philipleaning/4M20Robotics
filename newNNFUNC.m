function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Nov-2015 00:44:35.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_remove = [6 7 8];
x1_step1_keep = [1 2 3 4 5];
x1_step2_xoffset = [0;0;0;0;0];
x1_step2_gain = [9.91287489245416;9.83146620268518;10.5631717893296;9.39689658583453;9.91287489245416];
x1_step2_ymin = -1;

% Layer 1
b1 = [4.8043312056963838;-0.5679450309570041;1.7571359176073258;1.0454271457762916;-5.8897391151288128;3.6451092926114903;3.470136811114497;0.47036373826506384;-1.6851480285360489;-10.133203389736192];
IW1_1 = [0.22331925415928544 0.96609100797773717 1.4192628655157997 1.667362683902553 1.0186418211677459;-0.68526317547854076 -0.87842129257532287 1.9893734653005233 -1.4555592708888803 -0.60786351945311168;1.7282109226682487 -1.7550033903611184 -0.77287518169402791 1.5934598813569139 -1.3448695312093857;0.63225054593560748 0.23137188441797146 -0.63178976971373624 1.3042855958655375 0.52482524853961732;-3.5753517095650791 0.40533960536672697 -0.24865307650081131 -3.5679661004962369 -3.1864495918422766;0.09386889637391814 0.61666739907801671 3.0963800990085693 1.2540617650879915 0.55390387373687533;1.5345924811208413 1.5872375241777843 -0.57579641640311308 2.9921464697219116 0.79893460058845622;-0.23185604322735531 0.53577018773296792 1.3405171913962419 1.0980250272586756 1.391981035650923;-0.49255748182500803 -1.6340834417697747 -0.77172592603792001 2.407058505674915 -1.2134422683731891;-3.3091178305834021 -0.3323721560975007 2.0788693075583908 -4.1421315212857959 -0.96521515793348212];

% Layer 2
b2 = [-0.12328509249819944;-0.70876952369793045];
LW2_1 = [0.2982904040784502 0.34124579421715312 0.019348733524119959 -0.38591061213038691 -0.13893673670299647 -0.18044004468006564 0.31615789129038097 -0.087522275579820147 0.17081169941670854 0.17531462842833984;-0.023210727616556195 0.17292000483949552 -0.041400626866506862 0.23439789302514299 0.041220131858986923 0.0044120321988751193 0.019092573557395714 -0.0055533602416546835 -0.06188569262072182 -0.011783526187038876];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0145882352941176;0.00368322147651007];
y1_step1_xoffset = [-65.668202764977;-68.5131195335276];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
if isempty(settings_remove)
    y = x;
else
    y = x(settings_keep,:);
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
