function [Y,Xf,Af] = newNNFUNC(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Nov-2015 00:37:10.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_remove = [6 7 8];
x1_step1_keep = [1 2 3 4 5];
x1_step2_xoffset = [0;0;0;0;0];
x1_step2_gain = [8.08524814813073;9.47472706367133;9.98871678758957;8.93997417233612;8.08524814813073];
x1_step2_ymin = -1;

% Layer 1
b1 = [0.85563807885603249;-2.2635199167422302;-0.42554985073777507;0.47561502285438084;1.8991922445427114;-0.37094636667787984;-2.0082869512578951;0.67906996510669082;-6.0356690283445147;2.5546583827774589];
IW1_1 = [-4.7919514005809019 1.2012300286549606 5.6151015981761363 -1.3435304718489973 -1.2789983668674518;-0.77972846856256706 0.090970513275484846 -1.8080823420226075 -0.63139302678969234 0.48659276755731251;-0.3414894267438946 -1.0227202502043589 2.8141081784769 -2.3944134511650077 2.6634921427473541;3.042804161238903 -2.8722696772727963 0.76323362188473132 -0.072452662353717986 0.43139381803275584;0.91124487889300654 -0.16429763422694357 2.2872243047394365 0.62910004026481314 -0.87960099227626143;-6.2280151905188337 -4.3955510210784725 -3.2379195893647919 -0.1279847377096924 0.91518530054744818;-1.4644549256509625 0.73244117760353233 0.1688259325797179 -3.0495674267901038 1.3078713799988191;-0.51137054742239807 1.7399092330003458 -1.5821920600989754 -0.12886777852876433 0.58868198367022306;-3.5254156367029807 1.2970158710172059 -1.0788201251644343 -0.26200850450947344 -3.3392947293466895;-3.8409804479924623 1.4115618423034568 5.7529472505043362 -0.51857309446014488 -0.73352354019649768];

% Layer 2
b2 = [0.56854748200739025;-0.63079376659003195];
LW2_1 = [-0.34062511494885311 -0.38516763087897304 -0.042865305569493466 -0.12251235033433812 -0.7394659073035712 -1.0666900735012446 -0.04503088223025474 -0.53631873654516138 -0.036733894766078815 0.40860951502087295;0.11144298277813175 -0.39356312881968092 -0.046038166250467034 0.012222637544597389 -0.31419263904526756 -0.25929470975680641 0.070110666301723551 -0.08615000798095529 -0.020145375088766734 -0.093540013754772416];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.00951232876712329;0.00492639138240575];
y1_step1_xoffset = [-59.9078341013825;-49.5626822157435];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
if isempty(settings_remove)
    y = x;
else
    y = x(settings_keep,:);
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
