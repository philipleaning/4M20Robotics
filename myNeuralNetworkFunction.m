function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 03-Nov-2015 17:26:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;0;0;0];
x1_step1_gain = [0.1;0.181818181818182;0.166666666666667;0.133333333333333];
x1_step1_ymin = -1;

% Layer 1
b1 = [-2.4005796563616846;-2.1023541712710592;-1.3043290731352739;-0.42931704150980793;-0.46870250197865687;-0.0070623085835028465;0.98103943499019919;0.36549787376628129;2.0258564609250937;2.5863863380964598];
IW1_1 = [1.4811676804331417 -1.0223894678352186 0.97372289905817155 1.4150393096668035;1.7271294328394975 1.554598685295641 -0.68771908428681694 -0.16454710140573386;1.1302379712375017 -1.9508895672449251 0.69529336445842205 -0.15208156269308887;0.07843400137983797 -1.2779199463599031 1.208894248492266 -1.8159400928794651;-0.16982796741098344 -1.6549068948120176 1.8268079722374071 -0.97625850630947852;0.84328075126457058 -1.8591922055516574 -0.31787164579377919 2.8983548946249011;1.3337833624108495 0.31129109578315139 1.5376880343215593 0.86633903183157246;-0.53515384469241778 1.2334277052900871 2.3137188457374038 2.6569610264616501;2.245231031197366 1.2877522915543067 -0.17730526345240294 0.083310620093753895;-0.062898790187654929 1.5566209606870225 0.39345457305633019 2.2595457230585065];

% Layer 2
b2 = [-0.75402478356046343;0.61488776068675621];
LW2_1 = [-0.88818824099050675 -0.31110649145542041 0.48826636711708105 -0.058503337548015455 -0.25011278203943094 0.13057238594800608 -0.091696942141346494 -0.5886878084733963 -0.45226073683137769 0.62159121215698743;0.50943145426230441 0.0099245506714062126 0.30222670554025682 0.24658044594939313 -0.68169424338078399 0.21438338804834822 0.21362533795647826 -1.6218291242727152 -0.71081065399008514 1.3181562285519983];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.0193966480446927;0.00343859649122807];
y1_step1_xoffset = [-62.7880184331797;-293.731778425656];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
